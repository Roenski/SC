
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000176  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000005d0  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bc0  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001390  2**2
                  CONTENTS, READONLY
  6 .debug_info   000004b0  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000470  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00001cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a0  00000000  00000000  00001d0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	46 c0       	rjmp	.+140    	; 0x9a <__vector_6>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0d c0       	rjmp	.+26     	; 0x38 <__vector_14>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d2 e0       	ldi	r29, 0x02	; 2
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	5c d0       	rcall	.+184    	; 0xec <main>
  34:	9e c0       	rjmp	.+316    	; 0x172 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <__vector_14>:
#include <avr/io.h>
#include <util/delay_basic.h>
#include <avr/interrupt.h>

ISR(TIMER0_COMPA_vect)
{
  38:	1f 92       	push	r1
  3a:	0f 92       	push	r0
  3c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
  40:	0f 92       	push	r0
  42:	11 24       	eor	r1, r1
  44:	2f 93       	push	r18
  46:	3f 93       	push	r19
  48:	8f 93       	push	r24
  4a:	9f 93       	push	r25
  4c:	ef 93       	push	r30
  4e:	ff 93       	push	r31
  50:	cf 93       	push	r28
  52:	df 93       	push	r29
  54:	cd b7       	in	r28, 0x3d	; 61
  56:	de b7       	in	r29, 0x3e	; 62
	PORTB ^= 1<<0;
  58:	88 e3       	ldi	r24, 0x38	; 56
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	28 e3       	ldi	r18, 0x38	; 56
  5e:	30 e0       	ldi	r19, 0x00	; 0
  60:	f9 01       	movw	r30, r18
  62:	30 81       	ld	r19, Z
  64:	21 e0       	ldi	r18, 0x01	; 1
  66:	23 27       	eor	r18, r19
  68:	fc 01       	movw	r30, r24
  6a:	20 83       	st	Z, r18
	TCNT0H = 0;
  6c:	84 e3       	ldi	r24, 0x34	; 52
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	fc 01       	movw	r30, r24
  72:	10 82       	st	Z, r1
	TCNT0L = 0;
  74:	82 e5       	ldi	r24, 0x52	; 82
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	fc 01       	movw	r30, r24
  7a:	10 82       	st	Z, r1
}
  7c:	00 00       	nop
  7e:	df 91       	pop	r29
  80:	cf 91       	pop	r28
  82:	ff 91       	pop	r31
  84:	ef 91       	pop	r30
  86:	9f 91       	pop	r25
  88:	8f 91       	pop	r24
  8a:	3f 91       	pop	r19
  8c:	2f 91       	pop	r18
  8e:	0f 90       	pop	r0
  90:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
  94:	0f 90       	pop	r0
  96:	1f 90       	pop	r1
  98:	18 95       	reti

0000009a <__vector_6>:

ISR(TIMER0_OVF_vect)
{
  9a:	1f 92       	push	r1
  9c:	0f 92       	push	r0
  9e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	2f 93       	push	r18
  a8:	3f 93       	push	r19
  aa:	8f 93       	push	r24
  ac:	9f 93       	push	r25
  ae:	ef 93       	push	r30
  b0:	ff 93       	push	r31
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
	PORTB ^= 1<<1;
  ba:	88 e3       	ldi	r24, 0x38	; 56
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	28 e3       	ldi	r18, 0x38	; 56
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	f9 01       	movw	r30, r18
  c4:	30 81       	ld	r19, Z
  c6:	22 e0       	ldi	r18, 0x02	; 2
  c8:	23 27       	eor	r18, r19
  ca:	fc 01       	movw	r30, r24
  cc:	20 83       	st	Z, r18
}
  ce:	00 00       	nop
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	ff 91       	pop	r31
  d6:	ef 91       	pop	r30
  d8:	9f 91       	pop	r25
  da:	8f 91       	pop	r24
  dc:	3f 91       	pop	r19
  de:	2f 91       	pop	r18
  e0:	0f 90       	pop	r0
  e2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <main>:


int main (void)
{
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	00 d0       	rcall	.+0      	; 0xf2 <main+0x6>
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
	// Counter output compare value
	// 15624
	uint8_t cmph = 0x3D;
  f6:	8d e3       	ldi	r24, 0x3D	; 61
  f8:	89 83       	std	Y+1, r24	; 0x01
	uint8_t cmpl = 0x08;
  fa:	88 e0       	ldi	r24, 0x08	; 8
  fc:	8a 83       	std	Y+2, r24	; 0x02

	cli();
  fe:	f8 94       	cli
	TCCR0A |= 1<<TCW0; // 16-bit normal mode
 100:	85 e3       	ldi	r24, 0x35	; 53
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	25 e3       	ldi	r18, 0x35	; 53
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	f9 01       	movw	r30, r18
 10a:	20 81       	ld	r18, Z
 10c:	20 68       	ori	r18, 0x80	; 128
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18
	TCCR0B |= 1<<CS01 | 1<<CS00; // divide by 64
 112:	83 e5       	ldi	r24, 0x53	; 83
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	23 e5       	ldi	r18, 0x53	; 83
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	f9 01       	movw	r30, r18
 11c:	20 81       	ld	r18, Z
 11e:	23 60       	ori	r18, 0x03	; 3
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
	OCR0B = cmph;
 124:	82 e3       	ldi	r24, 0x32	; 50
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	29 81       	ldd	r18, Y+1	; 0x01
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18
	OCR0A = cmpl;
 12e:	83 e3       	ldi	r24, 0x33	; 51
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	2a 81       	ldd	r18, Y+2	; 0x02
 134:	fc 01       	movw	r30, r24
 136:	20 83       	st	Z, r18
	TIMSK |= 1<<OCIE0A | 1<<TOIE0; // enable timer compare interrupt
 138:	89 e5       	ldi	r24, 0x59	; 89
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	29 e5       	ldi	r18, 0x59	; 89
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	f9 01       	movw	r30, r18
 142:	20 81       	ld	r18, Z
 144:	22 61       	ori	r18, 0x12	; 18
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
	sei();
 14a:	78 94       	sei

	DDRB |= 1<<0 | 1<<1;
 14c:	87 e3       	ldi	r24, 0x37	; 55
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	27 e3       	ldi	r18, 0x37	; 55
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	f9 01       	movw	r30, r18
 156:	20 81       	ld	r18, Z
 158:	23 60       	ori	r18, 0x03	; 3
 15a:	fc 01       	movw	r30, r24
 15c:	20 83       	st	Z, r18
	PORTB |= 1<<0 | 1<<1;
 15e:	88 e3       	ldi	r24, 0x38	; 56
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	28 e3       	ldi	r18, 0x38	; 56
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	f9 01       	movw	r30, r18
 168:	20 81       	ld	r18, Z
 16a:	23 60       	ori	r18, 0x03	; 3
 16c:	fc 01       	movw	r30, r24
 16e:	20 83       	st	Z, r18

	while(1)
	{}
 170:	ff cf       	rjmp	.-2      	; 0x170 <main+0x84>

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
